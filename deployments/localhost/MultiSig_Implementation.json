{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "addTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "confirmTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "confirmations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmationsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_confirmations",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "submitTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5901cc4a25b92bb5e66e2a8db33888a912278d430e759221f8ddc3aa5263a79a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "989690",
    "logsBloom": "0x
    "blockHash": "0x4339ef18757ebff2fc43795e60744df56f0574e55d59cf6d8986a67234a6b441",
    "transactionHash": "0x5901cc4a25b92bb5e66e2a8db33888a912278d430e759221f8ddc3aa5263a79a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0x5901cc4a25b92bb5e66e2a8db33888a912278d430e759221f8ddc3aa5263a79a",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x4339ef18757ebff2fc43795e60744df56f0574e55d59cf6d8986a67234a6b441"
      }
    ],
    "blockNumber": 12,
    "cumulativeGasUsed": "989690",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a4c8b2deab4d80e901f019b475082623",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_confirmations\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"eludius18\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"MultiSig Wallet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This Smart Contract is a MultiSig Wallet\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiSig.sol\":\"MultiSig\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/MultiSig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/// @title MultiSig Wallet\\n/// @author eludius18\\n/// @notice This Smart Contract is a MultiSig Wallet\\ncontract MultiSig is \\n    ReentrancyGuardUpgradeable, \\n    OwnableUpgradeable \\n{\\n    address[] public owners;\\n    uint256 public transactionCount;\\n    uint256 public required;\\n\\n    struct Transaction {\\n        address payable destination;\\n        uint256 value;\\n        bool executed;\\n        bytes data;\\n    }\\n\\n    mapping(uint256 => Transaction) public transactions;\\n    mapping(uint256 => mapping(address => bool)) public confirmations;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address[] memory _owners, uint256 _confirmations) initializer public {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        require(_owners.length > 0);\\n        require(_confirmations > 0);\\n        require(_confirmations <= _owners.length);\\n        owners = _owners;\\n        required = _confirmations;\\n    }\\n    receive() payable external {\\n        \\n    }\\n\\n    function executeTransaction(uint256 transactionId) public nonReentrant {\\n        require(isConfirmed(transactionId));\\n        Transaction storage _tx = transactions[transactionId];\\n        (bool success, ) = _tx.destination.call{ value: _tx.value }(_tx.data);\\n        require(success);\\n        _tx.executed = true;\\n    }\\n\\n    function isConfirmed(uint256 transactionId) public view returns(bool) {\\n        return getConfirmationsCount(transactionId) >= required;\\n    }\\n\\n    function getConfirmationsCount(uint256 transactionId) public view returns(uint256) {\\n        uint256 count;\\n        for(uint256 i = 0; i < owners.length; i++) {\\n            if(confirmations[transactionId][owners[i]]) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    function isOwner(address addr) private view returns(bool) {\\n        for(uint256 i = 0; i < owners.length; i++) {\\n            if(owners[i] == addr) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function submitTransaction(address payable dest, uint256 value,bytes calldata data) external {\\n        uint256 id = addTransaction(dest, value,data);\\n        confirmTransaction(id);\\n    }\\n\\n    function confirmTransaction(uint256 transactionId) public {\\n        require(isOwner(msg.sender));\\n        confirmations[transactionId][msg.sender] = true;\\n        if(isConfirmed(transactionId)) {\\n            executeTransaction(transactionId);\\n        }\\n    }\\n\\n    function addTransaction(address payable destination, uint256 value,bytes calldata data) public returns(uint256) {\\n        transactions[transactionCount] = Transaction(destination, value, false,data);\\n        transactionCount += 1;\\n        return transactionCount - 1;\\n    }\\n}\",\"keccak256\":\"0x8ada494a2e8bec5f115f6b5dab91d7f8eaf0194f965478096d6950a6b7680f3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611075806100ec6000396000f3fe6080604052600436106100ec5760003560e01c8063b77bf6001161008a578063dc8452cd11610059578063dc8452cd146102a9578063ec096f8d146102bf578063ee22610b146102df578063f2fde38b146102ff57600080fd5b8063b77bf60014610225578063bce800e514610249578063c01a8c8414610269578063c64274741461028957600080fd5b8063715018a6116100c6578063715018a6146101a2578063784547a7146101b75780638da5cb5b146101d75780639ace38c2146101f557600080fd5b8063025e7c27146100f85780633411c81c1461013557806360b5bb3f1461018057600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50610118610113366004610b5b565b61031f565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014157600080fd5b50610170610150366004610b99565b609b60209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161012c565b34801561018c57600080fd5b506101a061019b366004610bdf565b610349565b005b3480156101ae57600080fd5b506101a06104ab565b3480156101c357600080fd5b506101706101d2366004610b5b565b6104bf565b3480156101e357600080fd5b506065546001600160a01b0316610118565b34801561020157600080fd5b50610215610210366004610b5b565b6104d5565b60405161012c9493929190610caa565b34801561023157600080fd5b5061023b60985481565b60405190815260200161012c565b34801561025557600080fd5b5061023b610264366004610b5b565b610596565b34801561027557600080fd5b506101a0610284366004610b5b565b61061f565b34801561029557600080fd5b506101a06102a4366004610d18565b61066f565b3480156102b557600080fd5b5061023b60995481565b3480156102cb57600080fd5b5061023b6102da366004610d18565b61068f565b3480156102eb57600080fd5b506101a06102fa366004610b5b565b61078b565b34801561030b57600080fd5b506101a061031a366004610da1565b610842565b6097818154811061032f57600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff16158080156103695750600054600160ff909116105b806103835750303b158015610383575060005460ff166001145b6103eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561040e576000805461ff0019166101001790555b6104166108b8565b61041e6108e7565b600083511161042c57600080fd5b6000821161043957600080fd5b825182111561044757600080fd5b825161045a906097906020860190610ae1565b50609982905580156104a6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6104b3610916565b6104bd6000610970565b565b60006099546104cd83610596565b101592915050565b609a6020526000908152604090208054600182015460028301546003840180546001600160a01b0390941694929360ff909216929161051390610dc5565b80601f016020809104026020016040519081016040528092919081815260200182805461053f90610dc5565b801561058c5780601f106105615761010080835404028352916020019161058c565b820191906000526020600020905b81548152906001019060200180831161056f57829003601f168201915b5050505050905084565b60008060005b609754811015610618576000848152609b6020526040812060978054919291849081106105cb576105cb610dff565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610606578161060281610e2b565b9250505b8061061081610e2b565b91505061059c565b5092915050565b610628336109c2565b61063157600080fd5b6000818152609b602090815260408083203384529091529020805460ff1916600117905561065e816104bf565b1561066c5761066c8161078b565b50565b600061067d8585858561068f565b90506106888161061f565b5050505050565b60006040518060800160405280866001600160a01b0316815260200185815260200160001515815260200184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506098548152609a6020908152604091829020845181546001600160a01b0319166001600160a01b039091161781559084015160018201559083015160028201805460ff1916911515919091179055606083015190915060038201906107579082610e92565b5090505060016098600082825461076e9190610f52565b909155505060985461078290600190610f6b565b95945050505050565b610793610a2b565b61079c816104bf565b6107a557600080fd5b6000818152609a60205260408082208054600182015492519193926001600160a01b03909116916107da906003860190610f7e565b60006040518083038185875af1925050503d8060008114610817576040519150601f19603f3d011682016040523d82523d6000602084013e61081c565b606091505b505090508061082a57600080fd5b50600201805460ff1916600117905561066c60018055565b61084a610916565b6001600160a01b0381166108af5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e2565b61066c81610970565b600054610100900460ff166108df5760405162461bcd60e51b81526004016103e290610ff4565b6104bd610a8a565b600054610100900460ff1661090e5760405162461bcd60e51b81526004016103e290610ff4565b6104bd610aba565b6065546001600160a01b031633146104bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e2565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805b609754811015610a2257826001600160a01b0316609782815481106109ed576109ed610dff565b6000918252602090912001546001600160a01b031603610a105750600192915050565b80610a1a81610e2b565b9150506109c6565b50600092915050565b600260015403610a7d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103e2565b6002600155565b60018055565b600054610100900460ff16610ab15760405162461bcd60e51b81526004016103e290610ff4565b6104bd33610970565b600054610100900460ff16610a845760405162461bcd60e51b81526004016103e290610ff4565b828054828255906000526020600020908101928215610b36579160200282015b82811115610b3657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610b01565b50610b42929150610b46565b5090565b5b80821115610b425760008155600101610b47565b600060208284031215610b6d57600080fd5b5035919050565b6001600160a01b038116811461066c57600080fd5b8035610b9481610b74565b919050565b60008060408385031215610bac57600080fd5b823591506020830135610bbe81610b74565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610bf257600080fd5b823567ffffffffffffffff80821115610c0a57600080fd5b818501915085601f830112610c1e57600080fd5b8135602082821115610c3257610c32610bc9565b8160051b604051601f19603f83011681018181108682111715610c5757610c57610bc9565b604052928352818301935084810182019289841115610c7557600080fd5b948201945b83861015610c9a57610c8b86610b89565b85529482019493820193610c7a565b9997909101359750505050505050565b60018060a01b0385168152600060208581840152841515604084015260806060840152835180608085015260005b81811015610cf45785810183015185820160a001528201610cd8565b50600060a0828601015260a0601f19601f8301168501019250505095945050505050565b60008060008060608587031215610d2e57600080fd5b8435610d3981610b74565b935060208501359250604085013567ffffffffffffffff80821115610d5d57600080fd5b818701915087601f830112610d7157600080fd5b813581811115610d8057600080fd5b886020828501011115610d9257600080fd5b95989497505060200194505050565b600060208284031215610db357600080fd5b8135610dbe81610b74565b9392505050565b600181811c90821680610dd957607f821691505b602082108103610df957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610e3d57610e3d610e15565b5060010190565b601f8211156104a657600081815260208120601f850160051c81016020861015610e6b5750805b601f850160051c820191505b81811015610e8a57828155600101610e77565b505050505050565b815167ffffffffffffffff811115610eac57610eac610bc9565b610ec081610eba8454610dc5565b84610e44565b602080601f831160018114610ef55760008415610edd5750858301515b600019600386901b1c1916600185901b178555610e8a565b600085815260208120601f198616915b82811015610f2457888601518255948401946001909101908401610f05565b5085821015610f425787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115610f6557610f65610e15565b92915050565b81810381811115610f6557610f65610e15565b6000808354610f8c81610dc5565b60018281168015610fa45760018114610fb957610fe8565b60ff1984168752821515830287019450610fe8565b8760005260208060002060005b85811015610fdf5781548a820152908401908201610fc6565b50505082870194505b50929695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220eeb67d86f3be6bac586dabf58baa6d07d8bf6e0cbe70e20cf23cbb6e5598710f64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c8063b77bf6001161008a578063dc8452cd11610059578063dc8452cd146102a9578063ec096f8d146102bf578063ee22610b146102df578063f2fde38b146102ff57600080fd5b8063b77bf60014610225578063bce800e514610249578063c01a8c8414610269578063c64274741461028957600080fd5b8063715018a6116100c6578063715018a6146101a2578063784547a7146101b75780638da5cb5b146101d75780639ace38c2146101f557600080fd5b8063025e7c27146100f85780633411c81c1461013557806360b5bb3f1461018057600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50610118610113366004610b5b565b61031f565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014157600080fd5b50610170610150366004610b99565b609b60209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161012c565b34801561018c57600080fd5b506101a061019b366004610bdf565b610349565b005b3480156101ae57600080fd5b506101a06104ab565b3480156101c357600080fd5b506101706101d2366004610b5b565b6104bf565b3480156101e357600080fd5b506065546001600160a01b0316610118565b34801561020157600080fd5b50610215610210366004610b5b565b6104d5565b60405161012c9493929190610caa565b34801561023157600080fd5b5061023b60985481565b60405190815260200161012c565b34801561025557600080fd5b5061023b610264366004610b5b565b610596565b34801561027557600080fd5b506101a0610284366004610b5b565b61061f565b34801561029557600080fd5b506101a06102a4366004610d18565b61066f565b3480156102b557600080fd5b5061023b60995481565b3480156102cb57600080fd5b5061023b6102da366004610d18565b61068f565b3480156102eb57600080fd5b506101a06102fa366004610b5b565b61078b565b34801561030b57600080fd5b506101a061031a366004610da1565b610842565b6097818154811061032f57600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff16158080156103695750600054600160ff909116105b806103835750303b158015610383575060005460ff166001145b6103eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561040e576000805461ff0019166101001790555b6104166108b8565b61041e6108e7565b600083511161042c57600080fd5b6000821161043957600080fd5b825182111561044757600080fd5b825161045a906097906020860190610ae1565b50609982905580156104a6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6104b3610916565b6104bd6000610970565b565b60006099546104cd83610596565b101592915050565b609a6020526000908152604090208054600182015460028301546003840180546001600160a01b0390941694929360ff909216929161051390610dc5565b80601f016020809104026020016040519081016040528092919081815260200182805461053f90610dc5565b801561058c5780601f106105615761010080835404028352916020019161058c565b820191906000526020600020905b81548152906001019060200180831161056f57829003601f168201915b5050505050905084565b60008060005b609754811015610618576000848152609b6020526040812060978054919291849081106105cb576105cb610dff565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610606578161060281610e2b565b9250505b8061061081610e2b565b91505061059c565b5092915050565b610628336109c2565b61063157600080fd5b6000818152609b602090815260408083203384529091529020805460ff1916600117905561065e816104bf565b1561066c5761066c8161078b565b50565b600061067d8585858561068f565b90506106888161061f565b5050505050565b60006040518060800160405280866001600160a01b0316815260200185815260200160001515815260200184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506098548152609a6020908152604091829020845181546001600160a01b0319166001600160a01b039091161781559084015160018201559083015160028201805460ff1916911515919091179055606083015190915060038201906107579082610e92565b5090505060016098600082825461076e9190610f52565b909155505060985461078290600190610f6b565b95945050505050565b610793610a2b565b61079c816104bf565b6107a557600080fd5b6000818152609a60205260408082208054600182015492519193926001600160a01b03909116916107da906003860190610f7e565b60006040518083038185875af1925050503d8060008114610817576040519150601f19603f3d011682016040523d82523d6000602084013e61081c565b606091505b505090508061082a57600080fd5b50600201805460ff1916600117905561066c60018055565b61084a610916565b6001600160a01b0381166108af5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e2565b61066c81610970565b600054610100900460ff166108df5760405162461bcd60e51b81526004016103e290610ff4565b6104bd610a8a565b600054610100900460ff1661090e5760405162461bcd60e51b81526004016103e290610ff4565b6104bd610aba565b6065546001600160a01b031633146104bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e2565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805b609754811015610a2257826001600160a01b0316609782815481106109ed576109ed610dff565b6000918252602090912001546001600160a01b031603610a105750600192915050565b80610a1a81610e2b565b9150506109c6565b50600092915050565b600260015403610a7d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103e2565b6002600155565b60018055565b600054610100900460ff16610ab15760405162461bcd60e51b81526004016103e290610ff4565b6104bd33610970565b600054610100900460ff16610a845760405162461bcd60e51b81526004016103e290610ff4565b828054828255906000526020600020908101928215610b36579160200282015b82811115610b3657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610b01565b50610b42929150610b46565b5090565b5b80821115610b425760008155600101610b47565b600060208284031215610b6d57600080fd5b5035919050565b6001600160a01b038116811461066c57600080fd5b8035610b9481610b74565b919050565b60008060408385031215610bac57600080fd5b823591506020830135610bbe81610b74565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610bf257600080fd5b823567ffffffffffffffff80821115610c0a57600080fd5b818501915085601f830112610c1e57600080fd5b8135602082821115610c3257610c32610bc9565b8160051b604051601f19603f83011681018181108682111715610c5757610c57610bc9565b604052928352818301935084810182019289841115610c7557600080fd5b948201945b83861015610c9a57610c8b86610b89565b85529482019493820193610c7a565b9997909101359750505050505050565b60018060a01b0385168152600060208581840152841515604084015260806060840152835180608085015260005b81811015610cf45785810183015185820160a001528201610cd8565b50600060a0828601015260a0601f19601f8301168501019250505095945050505050565b60008060008060608587031215610d2e57600080fd5b8435610d3981610b74565b935060208501359250604085013567ffffffffffffffff80821115610d5d57600080fd5b818701915087601f830112610d7157600080fd5b813581811115610d8057600080fd5b886020828501011115610d9257600080fd5b95989497505060200194505050565b600060208284031215610db357600080fd5b8135610dbe81610b74565b9392505050565b600181811c90821680610dd957607f821691505b602082108103610df957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610e3d57610e3d610e15565b5060010190565b601f8211156104a657600081815260208120601f850160051c81016020861015610e6b5750805b601f850160051c820191505b81811015610e8a57828155600101610e77565b505050505050565b815167ffffffffffffffff811115610eac57610eac610bc9565b610ec081610eba8454610dc5565b84610e44565b602080601f831160018114610ef55760008415610edd5750858301515b600019600386901b1c1916600185901b178555610e8a565b600085815260208120601f198616915b82811015610f2457888601518255948401946001909101908401610f05565b5085821015610f425787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115610f6557610f65610e15565b92915050565b81810381811115610f6557610f65610e15565b6000808354610f8c81610dc5565b60018281168015610fa45760018114610fb957610fe8565b60ff1984168752821515830287019450610fe8565b8760005260208060002060005b85811015610fdf5781548a820152908401908201610fc6565b50505082870194505b50929695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220eeb67d86f3be6bac586dabf58baa6d07d8bf6e0cbe70e20cf23cbb6e5598710f64736f6c63430008140033",
  "devdoc": {
    "author": "eludius18",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "MultiSig Wallet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This Smart Contract is a MultiSig Wallet",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 444,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 513,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1610,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1624,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "owners",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1626,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "transactionCount",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 1628,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "required",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 1642,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "transactions",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_struct(Transaction)1637_storage)"
      },
      {
        "astId": 1648,
        "contract": "contracts/MultiSig.sol:MultiSig",
        "label": "confirmations",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Transaction)1637_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiSig.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)1637_storage"
      },
      "t_struct(Transaction)1637_storage": {
        "encoding": "inplace",
        "label": "struct MultiSig.Transaction",
        "members": [
          {
            "astId": 1630,
            "contract": "contracts/MultiSig.sol:MultiSig",
            "label": "destination",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 1632,
            "contract": "contracts/MultiSig.sol:MultiSig",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1634,
            "contract": "contracts/MultiSig.sol:MultiSig",
            "label": "executed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1636,
            "contract": "contracts/MultiSig.sol:MultiSig",
            "label": "data",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}